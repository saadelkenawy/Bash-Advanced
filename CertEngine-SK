#! /bin/bash
#Task1: make sure openssl is installed
#===============================================
# Text Colors
RED='\e[31m'
GREEN='\e[32m'
YELLOW='\e[33m'
BLUE='\e[34m'
CYAN='\e[36m'
RESET='\e[0m' # No Color
# 1. Check if OpenSSL is installed.
if command -v openssl &>/dev/null; then
    echo  -e "✅ ${GREEN}OpenSSL is already installed.${RESET}"
    openssl version

else
    echo -e "❌ ${RED}OpenSSL is not installed.${RESET}"
fi

# 2. If not installed, ask the user for permission.
echo "OpenSSL is not found on this system."
read -p "Do you want to install it now? (y/N): " response

# 3. Proceed only if the user confirms (accepts 'y' or 'Y').
if [[  "${response,,}" =~ ^y ]]; then
    echo -e "${YELLOW}Installing openssl........${RESET}"
    if grep -q -i "centos" /etc/os-release; then
        echo -e "${BLUE}Detected RPM (Redhat, Centos, Rocky), System Must 8 and later${RESET}"
        dnf install openssl -y
    elif grep -q -i "ubuntu" /etc/os-release; then
       echo -e "${BLUE}Detected Ubuntu.${RESET}"
       apt-get install openssl -y
   else
       echo -e "${RED}Unsupported operating system.${RESET}"
   fi
else
        echo -e "${RED}Operation cancelled.${RESET}"
fi



#Phase 2 
echo -e "${YELLOW}Please Enter the Following Values or Press Enter Keeping Existing Data .${RESET}"
read -p "$(echo -e ${BLUE} 'Country Name (2 letter code) [EG]: ' ${GREEN})" countryName
countryName=${countryName:-EG}
echo ""
echo ""
read -p "$(echo -e ${BLUE} 'State or Province Name [Cairo]: ' ${GREEN})" stateOrProvinceName
stateOrProvinceName=${stateOrProvinceName:-Cairo}
echo ""
echo ""
read -p "$(echo -e ${BLUE} 'Locality Name [Giza]: ' ${GREEN})" localityName
localityName=${localityName:-Giza}
echo ""
echo ""
read -p "$(echo -e ${BLUE} 'Organization Name [My Company]: ' ${GREEN})" organizationName
organizationName=${organizationName:- CA Certificate Authority Organization BY Saad Elkenawy }
echo ""
echo ""
read -p "$(echo -e ${BLUE} 'Organizational Unit Name [IT]: ' ${GREEN})" organizationalUnitName
organizationalUnitName=${organizationalUnitName:-CA Certificate Authority Unit BY Saad Elkenawy}
echo ""
echo ""
read -p "$(echo -e ${BLUE} 'Common Name (e.g., your server's FQDN) [server.mycompany.com]: )"  commonName
commonName=${commonName:-CA Certificate Authority BY Saad Elkenawy}
echo ""
echo ""
read -p "$(echo -e ${BLUE} 'Email Address [admin@mycompany.com]: ' ${GREEN})" emailAddress
emailAddress=${emailAddress:-saad_elkenawy@yahoo.com}
echo ""
echo ""
# create a directory to store the openssl output files
echo -e "${YELLOW}Creating output directory for OpenSSL files...${RESET}"
echo ""
echo ""
output_dir=~/openssl_output
mkdir -p ${output_dir}
#Generate CA with PassPharse
# read from user a secure passphrase and save it in a variable name secure_passphrase
read -sp "$(echo -e ${RED} 'Enter a secure passphrase for the CA private key: ' ${GREEN})" secure_passphrase
# export the variable
export secure_passphrase
openssl genrsa -aes256 -out ${output_dir}/ca-key.pem -passout env:secure_passphrase 4096
echo -e "${GREEN}CA private key generated successfully.${RESET}"
echo ""
echo ""
# Generate CA certificate for CA private key with 10 years validity
openssl req -x509 -new -key ${output_dir}/ca-key.pem  -sha256 -days 3650 -out ${output_dir}/ca.pem -passin env:secure_passphrase -subj "/C=$countryName/ST=$stateOrProvinceName/L=$localityName/O=$organizationName/OU=$organizationalUnitName/CN=$commonName/emailAddress=$emailAddress"
echo -e "${GREEN}CA certificate generated successfully.${RESET}"
echo ""
echo ""
# Generate a cert Key for your server 
openssl genrsa -out ${output_dir}/cert-key.pem 4096
echo -e "${GREEN}Server private key generated successfully.${RESET}"
echo ""
echo ""
# Generate a CSR for your server
openssl req -new -sha256  -subj "/CN=S.M.S.K-CA"  -key ${output_dir}/cert-key.pem -out ${output_dir}/cert.csr
echo -e "${GREEN}Certificate Signing Request (CSR) generated successfully.${RESET}"
echo ""
echo ""
# Create v3.cnf file for SANs (Subject Alternative Names)
echo -e "${YELLOW}Creating v3.cnf file for SANs...${RESET}"
touch ${output_dir}/v3.cnf
san_list=""
#How many DNS names you want to add?
read -p "How many DNS names do you want to add? " dns_count
if ! [[ "$dns_count" =~ ^[0-9]+$ ]] || [ "$dns_count" -le 0 ]; then
    echo "Invalid input. Please enter a positive integer."
    exit 1
fi

for ((i=1; i<=dns_count; i++)); do
    read -p "Enter DNS name $i: " dns_name
    echo "DNS: $dns_name ," >> v3.cnf
    san_list+="DNS:$dns_name ,"

done
#How many IP-Addrss you want to add?
read -p "How many IP-Addrss do you want to add? " ip_count
if ! [[ "$ip_count" =~ ^[0-9]+$ ]] || [ "$ip_count" -le 0 ]; then
    echo "Invalid input. Please enter a positive integer."
    exit 1
fi

for ((y=1; y<=ip_count; y++)); do
    read -p "Enter Ip-Address $y: " ip_address
    echo "DNS: $ip_address ," >> v3.cnf
    san_list+="IP:$ip_address ,"
done

final_sans=${san_list%,}
cat <<EOL > ${output_dir}/v3.cnf
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment, keyAgreement, keyCertSign
subjectAltName = $final_sans
EOL
# Apply Clean On v3.cnf file
#sed -i '$s/[.,]$//' v3.cnf
echo -e "${GREEN}v3.cnf file created successfully.${RESET}"
echo ""
echo "Alternative Names created successfully."
# Generate the certificate signed by the CA
openssl x509 -req -sha256 -days 3650 -in ${output_dir}/cert.csr -CA ${output_dir}/ca.pem -CAkey  ${output_dir}/ca-key.pem -out ${output_dir}/cert.pem -extfile ${output_dir}/v3.cnf -CAcreateserial -passin env:secure_passphrase
echo -e "${GREEN}Certificate generated successfully.${RESET}"

# in case system is rpm based, copy the CA certificate to the system's trusted CA directory
if grep -q -i "centos" /etc/os-release || grep -q -i "rocky" /etc/os-release || grep -q -i "redhat" /etc/os-release; then
    echo -e "${YELLOW}Detected RPM-based system. Copying CA certificate to trusted CA directory...${RESET}"
    cp ${output_dir}/ca.pem /etc/pki/ca-trust/source/anchors/
    update-ca-trust extract
elif grep -q -i "ubuntu" /etc/os-release; then
echo -e "${RESET}"
    echo -e "${YELLOW}Detected Debian-based system. Copying CA certificate to trusted CA directory...${RESET}"
    cp ${output_dir}/ca.pem /usr/local/share/ca-certificates/
    update-ca-certificates
else
    echo -e "${RED}Unsupported operating system for automatic CA installation.${RESET}"
fi
#update CA on system
echo -e "${YELLOW}Updating CA on the system...${RESET}"
cp ${output_dir}/ca.pem /etc/pki/ca-trust/source/anchors/
update-ca-trust extract
echo -e "${GREEN}CA updated successfully.${RESET}"